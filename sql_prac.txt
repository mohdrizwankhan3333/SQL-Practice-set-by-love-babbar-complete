-- Q-14. Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from Worker table.

-- Q-15. Write an SQL query to print details of Workers with DEPARTMENT name as “Admin*”.

-- Q-16. Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.

-- Q-17. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.

-- Q-18. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.

-- Q-19. Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.

-- Q-20. Write an SQL query to print details of the Workers who have joined in Feb’2014.

-- Q-21. Write an SQL query to fetch the count of employees working in the department ‘Admin’.

-- Q-22. Write an SQL query to fetch worker full names with salaries >= 50000 and <= 100000.

-- Q-23. Write an SQL query to fetch the no. of workers for each department in the descending order.

-- Q-24. Write an SQL query to print details of the Workers who are also Managers.

-- Q-25. Write an SQL query to fetch number (more than 1) of same titles in the ORG of different types.

-- Q-26. Write an SQL query to show only odd rows from a table.

-- Q-27. Write an SQL query to show only even rows from a table. 

-- Q-28. Write an SQL query to clone a new table from another table.

-- Q-29. Write an SQL query to fetch intersecting records of two tables.

-- Q-30. Write an SQL query to show records from one table that another table does not have.
-- MINUS

-- Q-31. Write an SQL query to show the current date and time.
-- DUAL

-- Q-32. Write an SQL query to show the top n (say 5) records of a table order by descending salary.

-- Q-33. Write an SQL query to determine the nth (say n=5) highest salary from a table.

-- Q-34. Write an SQL query to determine the 5th highest salary without using LIMIT keyword.

-- Q-35. Write an SQL query to fetch the list of employees with the same salary.

-- Q-36. Write an SQL query to show the second highest salary from a table using sub-query.

-- Q-37. Write an SQL query to show one row twice in results from a table.

-- Q-38. Write an SQL query to list worker_id who does not get bonus.

-- Q-39. Write an SQL query to fetch the first 50% records from a table.

-- Q-40. Write an SQL query to fetch the departments that have less than 4 people in it.

-- Q-41. Write an SQL query to show all departments along with the number of people in there.

-- Q-42. Write an SQL query to show the last record from a table.

-- Q-43. Write an SQL query to fetch the first row of a table.

-- Q-44. Write an SQL query to fetch the last five records from a table.

-- Q-45. Write an SQL query to print the name of employees having the highest salary in each department.

-- Q-46. Write an SQL query to fetch three max salaries from a table using co-related subquery

-- Q-47. Write an SQL query to fetch three min salaries from a table using co-related subquery

-- Q-48. Write an SQL query to fetch nth max salaries from a table.

-- Q-49. Write an SQL query to fetch departments along with the total salaries paid for each of them.

-- Q-50. Write an SQL query to fetch the names of workers who earn the highest salary.


select * from worker where first_name NOT IN ('Vipul', 'Satish');
select * from worker where department LIKE 'Admin%';
select * from worker where first_name LIKE '%a%';
select * from worker where first_name LIKE '%a';
select * from worker where first_name LIKE '_____h';
select * from worker where salary between 100000 AND 500000;
select * from worker where YEAR(joining_date) = 2014 AND MONTH(joining_date) = 02;
select department, count(*) from worker where department = 'Admin';
select concat(first_name, ' ', last_name) from worker where salary between 50000 and 100000;
select department, count(worker_id) AS no_of_worker from worker group by department ORDER BY no_of_worker desc;
select w.* from worker as w inner join title as t on w.worker_id = t.worker_ref_id where t.worker_title = 'Manager';
select worker_title, count(*) as count from title group by worker_title having count > 1;
select * from worker where MOD (WORKER_ID, 2) != 0; -- / select * from worker where MOD (WORKER_ID, 2) <> 0;
select * from worker where MOD (WORKER_ID, 2) = 0;
-- CREATE TABLE worker_clone LIKE worker;
-- INSERT INTO worker_clone select * from worker;
-- select * from worker_clone;
select worker.* from worker inner join worker_clone using(worker_id);
select worker.* from worker left join worker_clone using(worker_id) WHERE worker_clone.worker_id is NULL;
select curdate();  -- for date only 
select now();  -- for datetime both
select * from worker order by salary desc LIMIT 5;
select * from worker order by salary desc LIMIT 4,1;
-- select salary from worker w1
-- WHERE 4 = (
-- SELECT COUNT(DISTINCT (w2.salary))
-- from worker w2
-- where w2.salary >= w1.salary);
select w1.* from worker w1, worker w2 where w1.salary = w2.salary and w1.worker_id != w2.worker_id;
select max(salary) from worker where salary not in (select max(salary) from worker);
select * from worker UNION ALL select * from worker ORDER BY worker_id;
select worker_id from worker where worker_id not in (select worker_ref_id from bonus);
select * from worker where worker_id <= ( select count(worker_id)/2 from worker);
select department, count(department) as depCount from worker group by department having depCount < 4;
select department, count(department) as depCount from worker group by department;
select * from worker where worker_id = (select max(worker_id) from worker);
select * from worker where worker_id = (select min(worker_id) from worker);
(select * from worker order by worker_id desc limit 5) order by worker_id;
-- select w.department, w.first_name, w.salary from
-- (select max(salary) as maxsal, department from worker group by department) temp
-- inner join worker w on temp.department = w.department and temp.maxsal = w.salary;
-- select distinct salary from worker w1
-- where 3 >= (select count(distinct salary) from worker w2 where w1.salary <= w2.salary) order by w1.salary desc;
-- DRY RUN AFTER REVISING THE CORELATED SUBQUERY CONCEPT FROM LEC-9.
-- select distinct salary from worker order by salary desc limit 3;
select distinct salary from worker w1 where 3 >= (select count(distinct salary) from worker w2 where w1.salary >= w2.salary) order by w1.salary desc;
select distinct salary from worker w1 where n >= (select count(distinct salary) from worker w2 where w1.salary <= w2.salary) order by w1.salary desc;
select department , sum(salary) as depSal from worker group by department order by depSal desc;
select first_name, salary from worker where salary = (select max(Salary) from worker);

